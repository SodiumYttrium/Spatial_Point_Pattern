{
  "hash": "11a4cdc2e9a62b4da5bb34e6f2f1d384",
  "result": {
    "markdown": "---\ntitle: \"Testing for CSR\"\nauthor: \"Natalie Young\"\ndate: \"2023-07-22\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\nbibliography: ../../references.bib\nlink-citations: TRUE\n---\n\n\nNow we will investigate some CSR tests, with the help of the `spatstat` package in RStudio.\n\n# Inter-event distances\n\nOur first method would be based on the distances between each pair of distinct events.\nWe denote the distance between events $i$ and $j$ as $t_{ij}$. For $n$ events, there\nare $\\frac{1}{2}n(n-1)$ distinct pairs of events in total.\n\nNow we define the distribution function of the distances, $t$, for CSR. For a unit square:\n$$\nH(t) =\n\\begin{cases}\n\\pi t^2 - \\frac{8}{3}t^3 + \\frac{1}{2}t^4 & \\text{if } & 0\\leq t\\leq 1 \\\\\n\\frac{1}{3} - 2t^2 - \\frac{1}{2}t^4 + \\frac{4}{3}(t^2 - 1)^\\frac{1}{2}(2t^2 + 1)\n+ 2t^2\\sin^{-1}(2t^{-2}-1) & \\text{if } & 1 < t\\leq \\sqrt{2} \\\\\n\\end{cases}\n$$\nAnd for a circle of unit radius:\n$$\nH(t) = 1+\\pi^{-1}\\{2(t^2-1)\\cos^{-1}(\\frac{t}{2}) - t(1+\\frac{t^2}{2})\\sqrt{1-\\frac{t^2}{4}}\\}\n$$\nfor all $0 \\leq t \\leq 2$. Indeed, $H(t)$ varies depending on the size and shape of\nthe sampling region $A$.\n\nAssume that $H(t)$ for the region in interest is known. We then calculate the\nempirical distribution function (EDF):\n$$\n\\hat{H}_1(t) = \\{\\frac{1}{2}n(n-1)\\}^{-1} \\#(t_{ij} \\leq t)\n$$\nwhere $\\#(t_{ij} \\leq t)$ means the number of observed distances that are at most $t$.\n\nNext, we simulate $n$ events under CSR $s-1$ times. From these we obtain $\\hat{H}_i(t)$\nfor $i=2, 3, \\dots, s$. Hereby we obtain the upper and lower envelopes:\n$$\nU(t)= \\text{max}\\{\\hat{H}_i(t)\\}; \\space L(t)= \\text{min}\\{\\hat{H}_i(t)\\}\n$$\n$\\hat{H}_1(t), U(t)$ and $L(t)$ can be plotted against $H(t)$. If $\\hat{H}_1(t)$ lies close\nto $H(t)$ and is between $U(t)$ and $L(t)$ throughout the range, we may accept CSR.\n\nMy replication of Diggle's plot on Japanese black pine saplings, using 99 simulations\nof CSR for the envelopes, affirms acceptance of CSR. This agrees with [@Bartlett] and\n[@Besag], who used a $\\chi^2$ test on a histogram of inter-event distances.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spatstat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'spatstat' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spatstat.data\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'spatstat.data' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spatstat.geom\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'spatstat.geom' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nspatstat.geom 3.1-0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spatstat.random\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'spatstat.random' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nspatstat.random 3.1-4\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spatstat.explore\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'spatstat.explore' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: nlme\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nspatstat.explore 3.1-0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spatstat.model\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'spatstat.model' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: rpart\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nspatstat.model 3.2-1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spatstat.linnet\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'spatstat.linnet' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nspatstat.linnet 3.1-0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nspatstat 3.0-3 \nFor an introduction to spatstat, type 'beginner' \n```\n:::\n\n```{.r .cell-code}\nlibrary(attention)\n\njpp <- japanesepines\n\nn <- 65\npd <- pairdist(jpp, periodic=FALSE, method=\"C\", squared=FALSE, metric=NULL)\n\nHhat = function(t){sum(pd[lower.tri(pd)] <= t) / (n*(n-1)/2)}\nH = function(t){\n  if (0 <= t && t <= 1) {\n    pi*t^2 - 8/3*t^3 + t^4/2\n  } else if (1 < t && t <= 1.42) {\n    1/3 - 2*t^2 - t^4/2 + 4*(t^2 - 1)^(1/2)*(2*t^2 + 1)/3 +2*t^2*asin(2*t^(-2) - 1)\n  }\n}\n\ndist <- seq(from = 0, to = 1.42, by = 0.01)\n\nH_apply <- lapply(dist, H)\nHhat_apply <- lapply(dist, Hhat)\n\npdlist <- vector(\"list\", length = length(dist))\npdmat <- matrix(nrow = 99, ncol = length(dist))\nfor (i in 1:99) {\n  pts <- runifpoint(n, win=window(jpp))\n  pds <- pairdist(pts, periodic=FALSE, method=\"C\", squared=FALSE, metric=NULL)\n  pdsvec <- pds[lower.tri(pds)]\n  for (t in dist) {\n    pdmat[i, which(dist == t)] <- sum(pdsvec <= t)\n  }\n}\nulist <- RowMax(t(pdmat))\nllist <-apply(pdmat, 2, min, simplify = TRUE)\nU <- lapply(ulist, function(t) t/((n*(n-1))/2))\nL <- lapply(llist, function(t) t/((n*(n-1))/2))\n\n\nplot(H_apply, Hhat_apply, col='green', type='l')\nlines(H_apply, U, col='red')\nlines(H_apply, L, col='cyan')\nlegend(x=0,y=1,c(\"data\",\"upper envelope\", \"lower envelope\"),cex=.8,col=c(\"green\",\"red\", \"cyan\"),pch=c(1,2,3))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n## Monte Carlo test\n\n2 ways to construct an exact Monte Carlo test for CSR are as below:\n\ni) Choose $t_0$ and let $u_i = \\hat{H}_i(t_0)$. The rank of $u_1$ is a basis for the\ntest as under CSR, all rankings of $u_1$ are equally probable.\n\nii) Define $u_i$ to be a measure of variation between $\\hat{H}_i(t)$ and $H(t)$, e.g.\n$u_i = \\int \\{\\hat{H}_i(t)-H(t)\\}^2 \\space dt$, then base the test on the rank of $u_1$.\n\nFor (i), we would need to choose a sensible $t_0$ for the problem. While (ii) is more\nobjective, it may not be a powerful test for inter-event distances.\n\nFor a region A in which $H(t)$ is unknown, we can replace it by:\n$$\n\\bar{H}_i(t) = \\frac{\\displaystyle \\sum_{j \\ne i}\\hat{H}_j(t)}{s-1}\n$$\nWhile $u_i$ under CSR is no longer independent, it still fulfills the requirement that\nall rankings of $u_1$ are equi-probable, as they are inter-changeable. We can plot\n$U(t), \\space L(t)$ and $\\hat{H}_1(t)$ against $\\bar{H}_1(t)$. Since $\\bar{H}_1(t)$\nonly depends on simulations of CSR, it is an unbiased estimate of H(t).\n\n# Nearest neighbour distances\n\nOur second method is measuring the distances to the closest neighbour from each event. For\nsituations in which events interact with each other on a small physical scale, such as\ntrees competing for sunlight and nutrients within a small relative area, we can focus on\n'small' inter-event distances when a precise threshold distance is hard to specify.\n\nLet $y_i$ be the closest neighbour distance of the $i$th event. Define the EDF:\n$$\n\\hat{G}_1(y) = \\frac{1}{n}\\#(y_i \\leq y)\n$$\nThe theoretical distribution of $y$ under CSR depends on $n$ and the region $A$.\nWith $|A|$ being the area of the region, the probability of an arbitrary event is\nwithin distance $y$ of another specified event is $\\frac{\\pi y^2}{|A|}$, i.e. the\narea of a circle with radius $y$ over the area of $A$. Since the events are located\nindependently, the approximate distribution of $y$ is:\n$$\nG(y) = 1 - (1 - \\frac{\\pi y^2}{|A|})^{n-1}\n$$\nFor a large $n$, let $\\lambda = \\frac{n}{|A|}$. The approximation is:\n$$\nG(y) = 1 - exp(-\\lambda \\pi y^2): \\space y \\geq 0\n$$\n\n## Monte Carlo test\n\nPossible test statistics for the Monte Carlo test could be $\\bar{y}$, the sample mean\nof the nearest distances, or\n$$\nu_i = \\int \\{\\hat{G}_i(y)-\\bar{G}_i(y)\\}^2 \\space dy,\n$$\nwhere\n$$\n\\bar{G}_i(y) = \\frac{1}{s-1}  \\displaystyle\\sum_{j \\ne i} \\hat{G}_j(y)\n$$\nAn advantage of using $\\bar{y}$ is that simulation is unnecessary. As shown by\nDonnelly(1978), $\\bar{y}$ under CSR is Normally distributed, with mean and variance:\n$$\nE(\\bar{y}) = 0.5(\\frac{n}{|A|})^{1/2} + \\frac{1}{n}(0.051+0.042n^{-1/2})P\n$$\nand\n$$\nVar(\\bar{y}) = 0.070n^{-2}|A|+0.037(n^{-5}|A|)^{1/2}P\n$$\nwhere P is the perimeter of region A. Significantly small or large \\bar{y}\nsuggests aggregation or regularity, respectively.\n\n# Point to nearest event distances\n\nThe third method uses the distances between the $m$ arbitrary sample points to the\nnearest of the $n$ events. Let $x_i$ be such distances, and our EDF would be:\n$$\n\\hat{F}(x) = \\frac{1}{m} \\#(x_i \\leq x)\n$$\nThis EDF would measure the empty spaces in region A, where $1-\\hat{F}(x)$ would be\napproximately equal to the area of space in region A that is at least distance $x$\naway from any event.\n\nSimilar to how the approximation of $G(y)$ for large $n$ was derived, under CSR,\nthe approximation of $F(x)$ is as follows:\n$$\nF(x) = 1-exp(-\\lambda \\pi x^2): \\space x \\geq 0\n$$\nwhere $\\lambda = \\frac{n}{|A|}$, once again.\n\n# Quadrat counts\n\nWe have looked into 3 different methods for CSR testing based on distances. Instead of\nmeasuring distances, we may divide the observed region $A$ into equally sized *quadrats*,\nand take counts of events in each quadrat.\n\nUnder CSR, the expected number of events in each quadrat should be equal. We can perform\nthe $\\chi^2$ goodness-of-fit test, obtaining the test statistic from  Pearson's\ncriterion,\n$$\nX^2 = \\displaystyle\\sum_{i=1}^m \\frac{(n_i - \\bar{n})^2}{\\bar{n}}\n$$\nIts null distribution is $\\chi_{m-1}^2$, provided that $\\bar{n}$ is not too small and\nthat each $x_i$ is at least 5. If $P(\\chi_{m-1}^2 > X^2)$ is less than the significance level,\nwe may reject CSR.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}